{"ast":null,"code":"var _jsxFileName = \"/home/gases/fullstack-open/part02/2.19-2.20/src/App.js\";\nimport React, { useState, useEffect } from \"react\";\nimport Numbers from \"./components/Numbers\";\nimport PersonForm from \"./components/PersonForm\";\nimport Filter from \"./components/Filter\";\nimport Notification from './components/Notification';\nimport personService from \"./service/people\";\nimport \"./styles.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  function checkEmpty(newPerson) {\n    if (newPerson.name && newPerson.number) {\n      return true;\n    }\n\n    return false;\n  }\n\n  function editPerson(newPerson) {\n    if (persons.some(person => person.name === newPerson.name)) {\n      if (window.confirm(`Doing this will change de entry for ${newPerson.name}. Are you sure you want to proceed?`)) {\n        const person = persons.find(p => p.name === newPerson.name);\n        const changeNumber = { ...person,\n          number: newPerson.number\n        };\n        personService.changePerson(person.id, changeNumber).then(changedPerson => {\n          setPersons(persons.map(person => person.name !== changedPerson.name ? person : changedPerson));\n        }).catch(() => {\n          setMessage(`Information for ${newPerson.name} has already been removed from the server`);\n          setType(\"fail\");\n          setTimeout(() => {\n            setMessage(null);\n          }, 1500);\n        });\n      }\n    } else {\n      personService.addPerson(newPerson).then(returnedPerson => {\n        setPersons(persons.concat(returnedPerson));\n        setMessage(`Added ${returnedPerson.name}`);\n        setType(\"success\");\n        setTimeout(() => {\n          setMessage(null);\n        }, 1500);\n      });\n    }\n  } //Hooks start\n\n\n  const [persons, setPersons] = useState([]);\n  const [newName, setNewName] = useState(\"\");\n  const [newNumber, setNewNumber] = useState(\"\");\n  const [filter, setFilter] = useState(\"\");\n  const [message, setMessage] = useState(null);\n  const [type, setType] = useState(\"\");\n  useEffect(() => {\n    personService.allPeople().then(initialPeople => {\n      setPersons(initialPeople);\n    });\n  }, []); //Hooks end\n  //Event handlers start\n\n  const addPerson = event => {\n    event.preventDefault();\n    const newPerson = {\n      name: newName,\n      number: newNumber,\n      id: persons.length * (Math.random() * 100)\n    };\n    checkEmpty(newPerson) ? editPerson(newPerson) : alert(`please fill the entire form!`);\n    setNewName(\"\");\n    setNewNumber(\"\");\n  };\n\n  const deletePerson = id => {\n    if (window.confirm(`Do you really want to delete this entry?`)) {\n      personService.deletePerson(id).then(() => {\n        setPersons(persons.filter(person => person.id !== id));\n      });\n    }\n  };\n\n  const handleNameChange = event => {\n    setNewName(event.target.value);\n  };\n\n  const handleNumberChange = event => {\n    setNewNumber(event.target.value);\n  };\n\n  const handleFilterChange = event => {\n    setFilter(event.target.value);\n  }; //Event handlers end\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Phonebook\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Filter, {\n      filterChange: handleFilterChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Add a new person\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Notification, {\n      message: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PersonForm, {\n      addNewPerson: addPerson,\n      name: newName,\n      nameChange: handleNameChange,\n      number: newNumber,\n      numberChange: handleNumberChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Numbers\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this), persons.filter(person => person.name.includes(filter)).map(person => /*#__PURE__*/_jsxDEV(Numbers, {\n      name: person.name,\n      number: person.number,\n      deletePerson: () => deletePerson(person.id)\n    }, person.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 11\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 5\n  }, this);\n};\n\nexport default App;","map":{"version":3,"sources":["/home/gases/fullstack-open/part02/2.19-2.20/src/App.js"],"names":["React","useState","useEffect","Numbers","PersonForm","Filter","Notification","personService","App","checkEmpty","newPerson","name","number","editPerson","persons","some","person","window","confirm","find","p","changeNumber","changePerson","id","then","changedPerson","setPersons","map","catch","setMessage","setType","setTimeout","addPerson","returnedPerson","concat","newName","setNewName","newNumber","setNewNumber","filter","setFilter","message","type","allPeople","initialPeople","event","preventDefault","length","Math","random","alert","deletePerson","handleNameChange","target","value","handleNumberChange","handleFilterChange","includes"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Numbers from \"./components/Numbers\";\nimport PersonForm from \"./components/PersonForm\";\nimport Filter from \"./components/Filter\";\nimport Notification from './components/Notification';\nimport personService from \"./service/people\";\nimport \"./styles.css\";\n\nconst App = () => {\n  function checkEmpty(newPerson) {\n    if (newPerson.name && newPerson.number) {\n      return true;\n    }\n    return false;\n  }\n\n  function editPerson(newPerson) {\n    if (persons.some((person) => person.name === newPerson.name)) {\n      if (\n        window.confirm(\n          `Doing this will change de entry for ${newPerson.name}. Are you sure you want to proceed?`\n        )\n      ) {\n        const person = persons.find((p) => p.name === newPerson.name);\n        const changeNumber = { ...person, number: newPerson.number };\n\n        personService\n          .changePerson(person.id, changeNumber)\n          .then((changedPerson) => {\n            setPersons(\n              persons.map((person) =>\n                person.name !== changedPerson.name ? person : changedPerson\n              )\n            );\n          })\n          .catch(() => {\n            setMessage(`Information for ${newPerson.name} has already been removed from the server`);\n            setType(\"fail\");\n            setTimeout(() => {\n              setMessage(null)\n            },1500);\n          });\n      }\n    } else {\n      personService.addPerson(newPerson).then((returnedPerson) => {\n        setPersons(persons.concat(returnedPerson));\n        setMessage(`Added ${returnedPerson.name}`);\n        setType(\"success\");\n        setTimeout(() => {\n          setMessage(null);\n        },1500)        \n      });\n    }\n  }\n\n  //Hooks start\n  const [persons, setPersons] = useState([]);\n  const [newName, setNewName] = useState(\"\");\n  const [newNumber, setNewNumber] = useState(\"\");\n  const [filter, setFilter] = useState(\"\");\n  const [message, setMessage] = useState(null);\n  const [type, setType] = useState(\"\");\n\n  useEffect(() => {\n    personService.allPeople().then((initialPeople) => {\n      setPersons(initialPeople);\n    });\n  }, []);\n  //Hooks end\n\n  //Event handlers start\n  const addPerson = (event) => {\n    event.preventDefault();\n    const newPerson = {\n      name: newName,\n      number: newNumber,\n      id: persons.length * (Math.random() * 100),\n    };\n\n    checkEmpty(newPerson)\n      ? editPerson(newPerson)\n      : alert(`please fill the entire form!`);\n\n    setNewName(\"\");\n    setNewNumber(\"\");\n  };\n\n  const deletePerson = (id) => {\n    if (window.confirm(`Do you really want to delete this entry?`)) {\n      personService.deletePerson(id).then(() => {\n        setPersons(persons.filter((person) => person.id !== id));\n      });\n    }\n  };\n\n  const handleNameChange = (event) => {\n    setNewName(event.target.value);\n  };\n\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value);\n  };\n\n  const handleFilterChange = (event) => {\n    setFilter(event.target.value);\n  };\n  //Event handlers end\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Filter filterChange={handleFilterChange} />\n      <br />\n      <h3>Add a new person</h3>\n      <Notification message={message}/>\n      <PersonForm\n        addNewPerson={addPerson}\n        name={newName}\n        nameChange={handleNameChange}\n        number={newNumber}\n        numberChange={handleNumberChange}\n      />\n      <br />\n      <h3>Numbers</h3>\n      {persons\n        .filter((person) => person.name.includes(filter))\n        .map((person) => (\n          <Numbers\n            key={person.id}\n            name={person.name}\n            number={person.number}\n            deletePerson={() => deletePerson(person.id)}\n          />\n        ))}\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}